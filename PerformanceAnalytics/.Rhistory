ls()
require(quantmod)
getSymbols('^GSPC', from='1900-01-01')
require(quantstrat)
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
q)_
q()
require(quantmod)
update.packages('quantmod')
clear()
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
require(quantmod)
ls()
head(GSPC)
require(quantmod)
q()
require(quantmod)
install.packages("quantmod", repos="http://R-Forge.R-project.org")
require(quantmod)
install.packages("xts", repos="http://R-Forge.R-project.org")
install.packages("TTR", repos="http://R-Forge.R-project.org")
install.packages("zoo", repos="http://R-Forge.R-project.org")
require(quantmod)
require(xts)
require(quantstrat)
install.packages("zoo", repos="http://CRAN.org")
install.packages("TTR", repos="http://revolutionanalytics.com")
install.packages("TTR", repos="http://CRAN.org")
install.packages("TTR", repos="http://R-Forge.R-project.org")
head(GSPC)
require(quantstrat)
require(quantmod)
q()
require(quantmod)
require(quantstrat)
clear()
require(PerformanceAnalytics)
ls()
G <- GSPX
G <- GSPC
G$sig <- na.omit(ifelse(SMA(Cl(G), n=10) > SMA(Cl(G), n=30), 1, -1)
)
head(G)
G$sig <- ifelse(SMA(Cl(G), n=10) > SMA(Cl(G), n=30), 1, -1)
GG <- na.omit(G)
head(GG)
GG[GG$sig ==1]
nrow(GG[GG$sig ==1])
nrow(GG[GG$sig == -1])
clear()
ls()
head(GG)
ls()
clear()
?quantstrat
?ruleSignal
?quantstrat
?add.indicator
ls()
test = head(G)
test
?sample
test <- test[,1]
test
sample(test, replace=T)
test
clear()
test
sample(test)
?sample
test = sample(Op(GG), 12)
test
?shuffle
?rearrange
clear()
head(G)
q()
require(quantstrat)
clear()
ls()
fastMA = c(5,10,15)
slowMA = c(20,25,30)
signalMA <- c(1,5,10)
parm.comb <- expand.grid(fastMA=fastMA, slowMA=slowMA, signalMA=signalMA)
head(par.comb)
parm.comb <- expand.grid(fastMA=fastMA, slowMA=slowMA, signalMA=signalMA)
head(parm.comb)
parm.comb
class(parm.comb)
?expand.grid
ls()
head(test0
)
head(test)
nrow(test)
nrow(GG)
savehistory()
system('cat .Rhistory | grep test')
nrow(GG)
head(GG)
g <- monthlyReturn(Cl(GSPC), 6)
head(g)
g
g <- monthlyReturn(Cl(GSPC))
g
MAY <- g[.indexmon(g) == 4]
head(MAY)
Return.cumulative(MAY)
require(PerformanceAnalytics)
Return.cumulative(MAY)
Return.annualized(MAY)
nrow(MAY)
 may <- as.numeric(Return.cumulative(MAY))
may
may ^ (1/nrow(MAY) -1
)
may ^ (1/nrow(MAY)) -1
?Return.annualized
Return.annualized(MAY)
?Return.annualized
may ^ (12/nrow(MAY)) -1
may ^ (12/nrow(MAY)) -1
plot(MAY)
plot(Return.cumulative(MAY))
dev.off()
MAY
barplot(MAY)
barplot(MAY, horiz=T, las=1, names.arg=years)
years = seq(1950,2012,1)
barplot(MAY, horiz=T, las=1, names.arg=years)
barplot(MAY, horiz=T, las=1, names.arg=years, cex.names=.5)
?Omega
Omega(MAY)
clear()
Return.cumulative(MAY)
may
may ^ 12/63
may ^ 12/63 -1
may ^ (12/63) -1
may ^ (1/63) -1
?Annualized.return
?Return.annualized
?Return.cumulative
?Return.annualized
Return.annualized(MAY, scale=12/63)
savehistory()
system('cat .Rhistory | grep MAY')
MAYT
MAY
g <- montlyReturns(Cl(GSPC), type='l')
g <- monthlyReturns(Cl(GSPC), type='l')
g <- monthlyReturn(Cl(GSPC), type='l')
G <- monthlyReturn(Cl(GSPC))
MAY <- G[.indexmon(G) ==4]
may <- g[.indexmon(g) ==4]
may
sum(may)
exp(sum(may)) -1
Return.cumulative(MAY)
all.equal(exp(sum(may)) -1, as.numeric(Return.cumulative(MAY)))
Return.annaulized(MAY, scale=12)
Return.annualized(MAY, scale=12)
Return.annualized(MAY, scale=12/63)
Return.annualized(may, scale=12/63)
?Return.annualized
Return.annualized(may, scale=12/63, geometric=F)
Return.annualized(may, scale=12/63, geometric=T)
Return.annualized(MAY, scale=12/63, geometric=F)
may ^ (1/(1263)) -1
as.numeric(Return.cumulative(MAY)) ^ (1/(12/63)) -1
?Return.annualized
raise = 12/63
raise
as.numeric(Return.cumulative(MAY)) ^ raise -1
?Return.cumulative
prod(1+R)-1  
?Return.annualized
prod(1 + Ra)^(scale/n) - 1   
prod(1 + Ra)^(scale/n) - 1   
prod(1+R)-1  
as.numeric(Return.cumulative(MAY))+1 ^ raise -1
Return.annualized(MAY, scale=12/63, geometric=F)
Return.annualized(MAY, scale=raise)
(as.numeric(Return.cumulative(MAY))+1) ^ raise -1
clear()
(as.numeric(Return.cumulative(MAY))+1) ^ raise -1
(1+as.numeric(Return.cumulative(MAY))) ^ raise -1
(1+as.numeric(Return.cumulative(MAY))) ^ 1/raise -1
(1+as.numeric(Return.cumulative(MAY))) ^ 1/63 -1
you should treat these monthly returns as yearly returns because you only trade it once a year
as.numeric(Return.cumulative(MAY))
test =as.numeric(Return.cumulative(MAY))
test
raise = 1/63
test ^ raise
test ^ raise -1
Return.annualized(MAY, scale=1/63)
Return.annualized(MAY, scale=raise)
?Return.annualized
cum return ^ 1/years - 1
test
(test ^ raise) -1
all.equal( (test ^ raise) -1, Return.annualized(MAY, scale=raise))
all.equal( (test ^ raise) -1, as.numeric(Return.annualized(MAY, scale=raise)))
getwd()
savehistory()
q()
require(quantstrat)
require(PerformanceAnalytics)
ls()
head(MAY)
plot(1+MAY)
dev.off()
save.image()
q)(
qq
q()
ls()
q()
require(PerformanceAnalytics)
reuire(quantmod)
require(quantmod)
clear()
ls()
rm(fastMA, parm.comb, GG, signalMA, slowMA, test, may, years)
clear()
?Return.annualized
?Return.cumulative
str(MAY)
nrow(MAY)
Return.cumulative(MAY)
M <- MAY
M$run <- rollapply(MAY, 1, Return.cumulative)
head(M)
head(may)
may <- monthlyReturn(Cl(GSPC), type='l')
rm(M)
clear()
head(may)
for(i in 1:nrow(g)) rollapply(g, i, sum)
test = for(i in 1:nrow(g)) rollapply(g, i, sum)
 for(i in 1:nrow(g)) test[i,] = rollapply(g, i, sum)
test <- matrix(nrow=nrow(g))
 for(i in 1:nrow(g)) test[i,] = rollapply(g, i, sum)
 for(i in 1:nrow(g)) test[i,] = i
test
head(test)
nrow(g)
nrow(may)
may <- g[.indexmon(g) == 4]
may
 for(i in 1:nrow(may)) test[i,] = i
test
nrow(may)
test <- matrix(nrow=nrow(may))
 for(i in 1:nrow(may)) test[i,] = i
clear()
test
 for(i in 1:nrow(may)) test[i,] = rollapply(may, 1, sum)
 for(i in 1:nrow(may)) test[i,] = xts:::rollapply.xts(may, 1, sum)
 for(i in 1:nrow(may)) test[i,] = xts:::rollapply.xts(may, i, sum)
 for(i in 1:nrow(may)) test[i,] = xts:::rollapply.xts(may, i-1, sum)
 for(i in 1:nrow(may)) test[i,] = xts:::rollapply.xts(may, i+1, sum)
 for(i in 1:nrow(may)) test[i,] = xts:::rollapply.xts(may, i-1, sum)
 for(i in 1:nrow(may)) test[i,] = xts:::rollapply.xts(may, i+2, sum)
 for(i in 1:nrow(may)) test[i,] = xts:::rollapply.xts(may, i+1, sum)
 for(i in 0:nrow(may)) test[i,] = xts:::rollapply.xts(may, i+1, sum)
 for(i in 0:nrow(may)) test[i+1,] = xts:::rollapply.xts(may, i+1, sum)
clear()
 for(i in 2:nrow(may)) test[i,] = xts:::rollapply.xts(may, i, sum)
 for(i in 2:nrow(may)) test[i,] = xts:::rollapply.xts(may, i-1, sum)
may
head(MAY)
100 * MAY[1,]
100 * MAY[1,] +100
a <- 100 * MAY[1,] +100
a
a * MAY[2,] + a
as.numeric(a) * MAY[2,] + a
as.numeric(a) * MAY[2,] + as.numeric(a)
test - matrix(nrow=nrow(MAY))
test = matrix(nrow=nrow(MAY))
test
head(test)
test[1,]=100
head(test)
clear()
test[2,] = test[1,]*
MAY[1,] + MAY[1,]
test
head(test)
test[2,] = test[1,]*MAY[1,] + test[1,]
head(test)
test$ans <- lag(test[1,])
head(test)
test = matrix(nrow=nrow(MAY))
test[1,]=100
test[2,] = test[1,]*MAY[1,] + test[1,]
head(test)
test[,2]=lag(test)
test[,2]=lag(test, k=-1)
head(test)
for(i in 1:nrow(MAY)) test[i+1,] = test[i,]*MAY[i,] + test[i,]
for(i in 1:62) test[i+1,] = test[i,]*MAY[i,] + test[i,]
head(test)
test
plot(test)
plot(test, type='l')
savehistory()
test = matrix(nrow=nrow(MAY)+1)
for(i in 1:nrow(MAY)) test[i+1,] = test[i,]*MAY[i,] + test[i,]
head(test)
test[1,] = 100
for(i in 1:nrow(MAY)) test[i+1,] = test[i,]*MAY[i,] + test[i,]
head(test)
tail(test)
Return.cumulative(MAY)
test <- as.numeric(Return.cumulative(MAY))
test
Return.annualized(test)
Return.annualized(MAY)
ann = as.numeric(Return.annualized(MAY))
ann
ann - (test * (1/63) -1)
ann - (test * (12/63) -1)
?Return.annualized
prod(1 + Ra)^(scale/n) - 1     
prod(1 + MAY)^(scale/n) - 1     
prod(1 + MAY)^(scale/nrow(MAY)) - 1     
prod(1 + MAY)^(1/nrow(MAY)) - 1     
prod(1 + MAY)^(1/nrow(MAY)) - 1     -1
prod(1 + MAY)^(1/nrow(MAY)) - 1     -ann
prod(1 + MAY)
tail(test)
savehistory()
ann = as.numeric(Return.annualized(MAY))
ann is the value returned by the Return.annualized function
next, the formula that Return. annualized uses is this:
prod(1 + MAY)^(1/nrow(MAY)) - 1     
since the monthly return is all you get of the entire year, it's a yearly return
ie, the scale is 1/63
NOT 12/63
so everything after the ^ is consistent with the manual method
the problem for me is that Return.cumulative != prod(1+MAY) 
savehistory()
clear()
prod(1 + MAY)^(1/nrow(MAY)) - 1     
prod(1 + MAY) - Return.cumulative(MAY)
exactly off by 1
SO, Return.cumulative is the percentage an asset grows over the period, or the sum of the returns (log)
BUT to get the CAGR or Annualized value we take the last know value of the asset?????
s/know/known
it's confusing that cumulative return is defined two ways:
as a percentage and as a value
'
clear()
(Return.cumulative(MAY) + 1) ^ (1/63) -1
savehistory()
