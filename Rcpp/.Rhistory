require(Rcpp)
funx <- cfunction(signature(s="numeric", n="numeric"),
                      gslrng,
                      includes="#include <gsl/gsl_rng.h>",
                      Rcpp=TRUE,
                      cppargs="-I/usr/include",
                      libargs="-lgsl -lgslcblas")
require(inline)
funx <- cfunction(signature(s="numeric", n="numeric"),
                      gslrng,
                      includes="#include <gsl/gsl_rng.h>",
                      Rcpp=TRUE,
                      cppargs="-I/usr/include",
                      libargs="-lgsl -lgslcblas")
doublematrix <- cxxfunction(signature(x = "numeric"), body = '
Rcpp::NumericMatrix xcpp(x);
int nrows = xcpp.nrow();
int ncolumns = xcpp.ncol();
for (int i = 0; i < nrows; i++){
    for (int j = 0; j < ncolumns; j++){
        xcpp[nrows * j + i] *= 2;
    }
}
return xcpp;
', plugin="Rcpp")
print(doublematrix(matrix(1:10, nrow = 2)))
print(doublematrix(matrix(1:1000, nrow = 2)))
hello <- cxxfunction(      )
load('hello.rcpp')
ls()
hello()
load('hello.rcpp')
hello()
load('hello.r')
hello
load('hello.r')
source('hello.r')
require(inline)
hello <- cxxfunction(body='cout << 'hello';', plugin='Rcpp')
hello <- cxxfunction(signature(x='numeric'), body='cout << 'hello';', plugin='Rcpp')
hello <- cxxfunction(signature(x="numeric"), body="cout << "hello";" , plugin="Rcpp")
hello <- cxxfunction(signature(x="numeric"), body='print('hello')' , plugin="Rcpp")
hello <- cxxfunction(signature(x="numeric"), body='print('hello');' , plugin="Rcpp")
doublematrix
install.packages('FRAPO')
ls(all=T)
?try
parm.comb
fastMA m<-mc(5,10,15) 4
q()
