ls()
require(quantmod)
getSymbols('^GSPC', from='1900-01-01')
require(quantstrat)
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
q)_
q()
require(quantmod)
update.packages('quantmod')
clear()
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
require(quantmod)
ls()
head(GSPC)
require(quantmod)
q()
require(quantmod)
install.packages("quantmod", repos="http://R-Forge.R-project.org")
require(quantmod)
install.packages("xts", repos="http://R-Forge.R-project.org")
install.packages("TTR", repos="http://R-Forge.R-project.org")
install.packages("zoo", repos="http://R-Forge.R-project.org")
require(quantmod)
require(xts)
require(quantstrat)
install.packages("zoo", repos="http://CRAN.org")
install.packages("TTR", repos="http://revolutionanalytics.com")
install.packages("TTR", repos="http://CRAN.org")
install.packages("TTR", repos="http://R-Forge.R-project.org")
head(GSPC)
require(quantstrat)
require(quantmod)
q()
require(quantmod)
require(quantstrat)
clear()
require(PerformanceAnalytics)
ls()
G <- GSPX
G <- GSPC
G$sig <- na.omit(ifelse(SMA(Cl(G), n=10) > SMA(Cl(G), n=30), 1, -1)
)
head(G)
G$sig <- ifelse(SMA(Cl(G), n=10) > SMA(Cl(G), n=30), 1, -1)
GG <- na.omit(G)
head(GG)
GG[GG$sig ==1]
nrow(GG[GG$sig ==1])
nrow(GG[GG$sig == -1])
clear()
ls()
head(GG)
ls()
clear()
?quantstrat
?ruleSignal
?quantstrat
?add.indicator
ls()
test = head(G)
test
?sample
test <- test[,1]
test
sample(test, replace=T)
test
clear()
test
sample(test)
?sample
test = sample(Op(GG), 12)
test
?shuffle
?rearrange
clear()
head(G)
q()
require(quantstrat)
clear()
ls()
fastMA = c(5,10,15)
slowMA = c(20,25,30)
signalMA <- c(1,5,10)
parm.comb <- expand.grid(fastMA=fastMA, slowMA=slowMA, signalMA=signalMA)
head(par.comb)
parm.comb <- expand.grid(fastMA=fastMA, slowMA=slowMA, signalMA=signalMA)
head(parm.comb)
parm.comb
class(parm.comb)
?expand.grid
ls()
head(test0
)
head(test)
nrow(test)
nrow(GG)
savehistory()
system('cat .Rhistory | grep test')
nrow(GG)
head(GG)
g <- monthlyReturn(Cl(GSPC), 6)
head(g)
g
g <- monthlyReturn(Cl(GSPC))
g
MAY <- g[.indexmon(g) == 4]
head(MAY)
Return.cumulative(MAY)
require(PerformanceAnalytics)
Return.cumulative(MAY)
Return.annualized(MAY)
nrow(MAY)
 may <- as.numeric(Return.cumulative(MAY))
may
may ^ (1/nrow(MAY) -1
)
may ^ (1/nrow(MAY)) -1
?Return.annualized
Return.annualized(MAY)
?Return.annualized
may ^ (12/nrow(MAY)) -1
may ^ (12/nrow(MAY)) -1
plot(MAY)
plot(Return.cumulative(MAY))
dev.off()
MAY
barplot(MAY)
barplot(MAY, horiz=T, las=1, names.arg=years)
years = seq(1950,2012,1)
barplot(MAY, horiz=T, las=1, names.arg=years)
barplot(MAY, horiz=T, las=1, names.arg=years, cex.names=.5)
?Omega
Omega(MAY)
clear()
Return.cumulative(MAY)
may
may ^ 12/63
may ^ 12/63 -1
may ^ (12/63) -1
may ^ (1/63) -1
?Annualized.return
?Return.annualized
?Return.cumulative
?Return.annualized
Return.annualized(MAY, scale=12/63)
savehistory()
system('cat .Rhistory | grep MAY')
MAYT
MAY
g <- montlyReturns(Cl(GSPC), type='l')
g <- monthlyReturns(Cl(GSPC), type='l')
g <- monthlyReturn(Cl(GSPC), type='l')
G <- monthlyReturn(Cl(GSPC))
MAY <- G[.indexmon(G) ==4]
may <- g[.indexmon(g) ==4]
may
sum(may)
exp(sum(may)) -1
Return.cumulative(MAY)
all.equal(exp(sum(may)) -1, as.numeric(Return.cumulative(MAY)))
Return.annaulized(MAY, scale=12)
Return.annualized(MAY, scale=12)
Return.annualized(MAY, scale=12/63)
Return.annualized(may, scale=12/63)
?Return.annualized
Return.annualized(may, scale=12/63, geometric=F)
Return.annualized(may, scale=12/63, geometric=T)
Return.annualized(MAY, scale=12/63, geometric=F)
may ^ (1/(1263)) -1
as.numeric(Return.cumulative(MAY)) ^ (1/(12/63)) -1
?Return.annualized
raise = 12/63
raise
as.numeric(Return.cumulative(MAY)) ^ raise -1
?Return.cumulative
prod(1+R)-1  
?Return.annualized
prod(1 + Ra)^(scale/n) - 1   
prod(1 + Ra)^(scale/n) - 1   
prod(1+R)-1  
as.numeric(Return.cumulative(MAY))+1 ^ raise -1
Return.annualized(MAY, scale=12/63, geometric=F)
Return.annualized(MAY, scale=raise)
(as.numeric(Return.cumulative(MAY))+1) ^ raise -1
clear()
(as.numeric(Return.cumulative(MAY))+1) ^ raise -1
(1+as.numeric(Return.cumulative(MAY))) ^ raise -1
(1+as.numeric(Return.cumulative(MAY))) ^ 1/raise -1
(1+as.numeric(Return.cumulative(MAY))) ^ 1/63 -1
you should treat these monthly returns as yearly returns because you only trade it once a year
as.numeric(Return.cumulative(MAY))
test =as.numeric(Return.cumulative(MAY))
test
raise = 1/63
test ^ raise
test ^ raise -1
Return.annualized(MAY, scale=1/63)
Return.annualized(MAY, scale=raise)
?Return.annualized
cum return ^ 1/years - 1
test
(test ^ raise) -1
all.equal( (test ^ raise) -1, Return.annualized(MAY, scale=raise))
all.equal( (test ^ raise) -1, as.numeric(Return.annualized(MAY, scale=raise)))
getwd()
savehistory()
q()
require(quantstrat)
require(PerformanceAnalytics)
ls()
head(MAY)
plot(1+MAY)
dev.off()
save.image()
q)(
qq
q()
ls()
q()
library(blotter)
ls(all=T)
rm(list=all())
rm(list=())
rm(list=ls())
ls(all=T)
q()
ls()
ls(all=T)
require(blotter)
ls(all=T)
require(quantstrat)
ls(all=T)
q()
source('~/equitycurve.r')
ec
ls()
getSymbols('^GSPC', from='1900-01-01')
require(quantmod)
getSymbols('^GSPC', from='1900-01-01')
G <- monthlyReturn(Cl(GSPC))
head(G)
ec(G)
ec
G$curve <- NA
head(G)
ec(G)
source('equitycurve.r')
ec
ec(G)
require(PerformanceAnalytics)
g <- Return.cumulative(G)
g
g <- roll.apply(G, 1 , Return.cumulative(G))
g <- rollapply(G, 1 , Return.cumulative(G))
g <- rollapply(G, 1 , Return.cumulative)
head(g)
g <- g[,-2]
head(g)
g$names <- return.cum
g$names <- 'return.cum'
names(g) <- 'return.cum'
g <- rollapply(G, 1 , Return.cumulative)
head(g)
g <- rollapply(G, 1 , Return.cumulative + 1)
g$curve <- rollapply(g$monthly.returns, 1, sum)
head(g)
head(G)
G <- monthlyReturn(Cl(GSPC))
head(G)
g <- rollapply(G, 1, Return.cumulative)
head(g)
G$one <- G+1
head(G)
G$two <- G$one + lag(G$one)
head(G)
G$one <- G+1
plot(G$one)
plot(G$one['2011'])
head(g)
Return.cumulative(g)
Return.annualized(g)
jan <- g[.indexmon(g) == 0]
jan
Return.annualized(jan)
g <- monthlyReturn(Cl(GSPC), type='l')
g
g$some <- rollapply(g, 1, sum)
head(g)
sum(g[,1])
head(sum(g[,1]), n=3)
sum(head(g[,1]))
g$some <- rollapply(g, 6, sum)
g <- monthlyReturn(Cl(GSPC), type='l')
g$some <- rollapply(g, 6, sum)
sum(head(g[,1]))
head(g)
dev.off()
g$logg <- exp(g$some )-1
head(g)
g$cum <- rollapply(g$monthly.returns, 6, Return.cumulative)
head(g)
Return.cumulative(head(g)
)
g$cum <- rollapply(G$monthly.returns, 6, Return.cumulative)
g$cum <- xts:::rollapply.xts(G$monthly.returns, 6, Return.cumulative)
head(G)
Return.cumulative(head(G)
)
GG <- monthlyReturns(Cl(GSCP))
GG <- monthlyReturn(Cl(GSCP))
GG <- monthlyReturn(Cl(GSCPC))
GG <- monthlyReturn(Cl(GSPC))
head(GG)
for(i in 1:nrow(GG) )       foo[i,] = i
foo <- matrix(nrow=nrow(GG))
for(i in 1:nrow(GG) )       foo[i,] = i
goo
foo
head(foo)
for(i in 1:nrow(GG) )       foo[i,] = GG[i,]
head(foo)
for(i in 1:nrow(GG) )       foo[i,] = GG[i,]+1
head(foo)
for(i in 1:nrow(GG) )       foo[i,] = rollapply(G, i, Return.cumulative)
for(i in 1:nrow(GG) )       foo[i+1,] = rollapply(G, i, Return.cumulative)
foo[1,] = GG[1,] +1
head(foo)
for(i in 1:nrow(GG) )       foo[i+1,2] = rollapply(G, i, Return.cumulative)
foo[,2]=NA
foo <- matrix(nrow=nrow(GG), ncol=2)
head(foo)
foo[1,] = GG[1,] +1
head(foo)
for(i in 2:nrow(GG) )       foo[i,2] = rollapply(G, i, Return.cumulative)
for(i in 2:nrow(GG) )       foo[i,2] = xts:::rollapply.xts(G, i, Return.cumulative)
for(i in 1:nrow(GG) )       foo[i,2] = xts:::rollapply.xts(G, i, Return.cumulative)
foo = matrix(nrow=nrow(GG))
head(GG)
for(i in 1:nrow(GG) )       foo[i,] = xts:::rollapply.xts(GG, i, Return.cumulative)
for(i in 1:nrow(GG) )       foo[i,] = GG
head(GG)
for(i in 1:nrow(GG) )       foo[i,] = GG$monthly.returns
for(i in 1:nrow(GG) )       foo[i,] = i
head(foo)
foo = matrix(nrow=nrow(GG))
all.equal(nrow(foo), nrow(GG))
for(i in 1:nrow(GG) )       foo[i,] <- GG$monthly.returns
for(i in 1:nrow(GG) )       foo[i,] <- GG[i,]
head(foo)
for(i in 1:nrow(GG) )       foo[i,] <- Return.cumulative(GG[i,])
head(foo)
for(i in 1:nrow(GG) )       foo[i,] <- Return.cumulative(GG[2,])
foo
for(i in 1:nrow(GG) )       foo[i,] <- Return.cumulative(GG[i,])
head(foo)
GG$next = Return.cumulative(lag(GG))
boo = Return.cumulative(lag(GG))
head(boo)
head(GG)
GG$next = (GG$monthly.returns + 1)*(lag(GG$monthly.returns) +1)
boo = (GG$monthly.returns + 1)*(lag(GG$monthly.returns) +1)
head(boo)
plot(boo)
dev.off()
boo = (GG$monthly.returns + 1)*(lag(GG$monthly.returns) +1)
head(g)
system('cat .Rhistory | grep some')
savehistory()
system('cat .Rhistory | grep some')
g$some = rollapply(g, 1, sum)
savehistory()
g$some = rollapply(g, 1, sum)
g$some = xts:::rollapply.xts(g, 1, sum)
g$boo = rollapply(g, 1, sum)
head(g)
g$boo = rollapply(g$monthly.returns, 1, sum)
head(g)
for(i in 1:nrow(g) g$foo = rollapply(g$monthly.returns, i, sum)
for(i in 1:nrow(g)) g$foo = rollapply(g$monthly.returns, i, sum)
for(i in 1:nrow(g)) g$foo = rollapply(g$monthly.returns, i+1, sum)
for(i in 1:nrow(g)) g$foo = rollapply(g$monthly.returns, i-1, sum)
for(i in 1:nrow(g)) foo[i,] = rollapply(g$monthly.returns, i, sum)
foo <- matrix(nrow=nrow(g))
for(i in 1:nrow(g)) foo[i,] = rollapply(g$monthly.returns, i, sum)
head(foo)
doo <- 1:22
doo
doo <- matrix()
doo <- 1:22
doo
ls()
jan
head(jan)
sapply(jan, 1, mean)
?sapply
sapply(jan, mean)
jan$test <- sapply(jan, Return.cumulative)
head(jan)
test <- 1:12
test
test <- matrix(nrow=12
)
test
test < 1:12
test <- 1:12
test
t(test)
test
test <- matrix(nrow=12)
for(i in 1:nrow(test)) i
test
for(i in 1:nrow(test)) test[i,] = i
test
boo <- function(x) {zoo <- matrix(nrow=nrow(boo); zoo [i, ] = lag(x[i,]; return(zoo)    }
boo <- function(x) {zoo <- matrix(nrow=nrow(boo); zoo[i, ] = lag(x[i,]; return(zoo)    }
boo <- function(x) {zoo <- matrix(nrow=nrowx); zoo[i, ] = lag(x[i,]; return(zoo)    }
boo <- function(x) {zoo <- matrix(nrow=nrow(x); zoo[i, ] = lag(x[i,]; return(zoo)    }
boo <- function(x) {zoo <- matrix(nrow=nrow(x)); zoo[i, ] = lag(x[i,]; return(zoo)    }
boo <- function(x) {zoo <- matrix(nrow=nrow(x)); zoo[i,] <-  lag(x[i,]; return(zoo)    }
boo <- function(x) {zoo <- matrix(nrow=nrow(x)); zoo[i,] <-  lag(x[i,]); return(zoo)    }
boo
sapply(test, boo)
sapply(test, sum)
sapply(test, mean)
q()
